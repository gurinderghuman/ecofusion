steps:
  # Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/portfolio-ghuman/ecofusion-repo/ecofusion:v1-${SHORT_SHA}', '.']

  # Push the image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/portfolio-ghuman/ecofusion-repo/ecofusion:v1-${SHORT_SHA}']

  # Get GKE credentials
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - 'autopilot-cluster-1'
      - '--region'
      - 'us-central1'
      - '--project'
      - 'portfolio-ghuman'
      - '--quiet'

  # Debugging step: Print the current Kubernetes context
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['config', 'current-context']

  # Debugging step: Get the status of the deployment before applying changes
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['get', 'deployment', 'ecofusion-deployment', '--namespace', 'default', '-o', 'yaml']

  # Update the deployment to use the new image
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'set'
      - 'image'
      - 'deployment/ecofusion-deployment'
      - 'ecofusion-app=us-central1-docker.pkg.dev/portfolio-ghuman/ecofusion-repo/ecofusion:v1-${SHORT_SHA}'

  # Rollout restart to ensure new pods are created with the updated image
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'rollout'
      - 'restart'
      - 'deployment/ecofusion-deployment'

  # Wait for rollout to complete
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'rollout'
      - 'status'
      - 'deployment/ecofusion-deployment'
      - '--timeout=600s'

images:
  - us-central1-docker.pkg.dev/portfolio-ghuman/ecofusion-repo/ecofusion:v1-${SHORT_SHA}

options:
  logging: CLOUD_LOGGING_ONLY
