steps:
  # Set a valid tag
  - name: 'gcr.io/cloud-builders/bash'
    id: 'set-tag'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      if [ -n "${_REPO_NAME}" ] && [ -n "${_COMMIT_MESSAGE}" ]; then
        echo "${_REPO_NAME}-${_COMMIT_MESSAGE}-${SHORT_SHA}" | sed 's/[^a-zA-Z0-9._-]/-/g' > /workspace/image_tag.txt
      else
        echo "${SHORT_SHA}" > /workspace/image_tag.txt
      fi
      echo "IMAGE_TAG=$(cat /workspace/image_tag.txt)" >> $BUILDER_OUTPUT/output_vars
      echo "Image tag: $(cat /workspace/image_tag.txt)"

  # Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: 
    - 'build'
    - '-t'
    - 'gcr.io/$PROJECT_ID/ecofusion-website:${_IMAGE_TAG}'
    - '.'

  # Push the image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: 
    - 'push'
    - 'gcr.io/$PROJECT_ID/ecofusion-website:${_IMAGE_TAG}'

  # Update the image name in deployment.yaml
  - name: 'gcr.io/cloud-builders/sed'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      sed -i "s|gcr.io/\\$$PROJECT_ID/ecofusion-website:.*|gcr.io/$PROJECT_ID/ecofusion-website:${_IMAGE_TAG}|g" deployment.yaml

  # Print the contents of deployment.yaml
  - name: 'gcr.io/cloud-builders/cat'
    args: ['deployment.yaml']

  # Apply the updated deployment
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'deployment.yaml']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=ecofusion-cluster'

  # Apply the service (if it exists)
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'service.yaml']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=ecofusion-cluster'

images:
  - 'gcr.io/$PROJECT_ID/ecofusion-website:${_IMAGE_TAG}'

substitutions:
  _IMAGE_TAG: ${SHORT_SHA}

options:
  logging: CLOUD_LOGGING_ONLY