steps:
  # Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/ecofusion-website:$SHORT_SHA', '.']

  # Push the image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/ecofusion-website:$SHORT_SHA']

  # Extract the image name from deployment.yaml
  - name: 'gcr.io/cloud-builders/sed'
    args:
      - '-n'
      - 's/image: //p'
      - 'deployment.yaml'
      - '> image_name.txt'  # Redirect output to a file

  # Update the image name in deployment.yaml
  - name: 'gcr.io/cloud-builders/sed'
    args:
      - '-i'
      - 's|gcr.io/$PROJECT_ID/ecofusion-website:.*|gcr.io/$PROJECT_ID/ecofusion-website:\$(cat image_name.txt)|g'
      - 'deployment.yaml'

  # Apply the updated deployment
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'deployment.yaml']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=ecofusion-cluster'

  # Apply the service (if it exists)
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'service.yaml']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=ecofusion-cluster'

images:
  - 'gcr.io/$PROJECT_ID/ecofusion-website:$SHORT_SHA'

options:
  logging: CLOUD_LOGGING_ONLY
