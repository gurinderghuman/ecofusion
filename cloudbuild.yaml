steps:
  # Set the image tag based on the commit SHA
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args: 
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/ecofusion-website:${SHORT_SHA}'
      - '.'

  # Push the image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image'
    args: 
      - 'push'
      - 'gcr.io/$PROJECT_ID/ecofusion-website:${SHORT_SHA}'

  # Update the image name in the Kubernetes deployment manifest
  - name: 'gcr.io/cloud-builders/sed'
    id: 'update-manifest'
    args: 
      - '-i'
      - 's|gcr.io/$PROJECT_ID/ecofusion-website:.*|gcr.io/$PROJECT_ID/ecofusion-website:${SHORT_SHA}|'
      - 'deployment.yaml'

  # Apply the updated deployment to the Kubernetes cluster
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'apply-deployment'
    args: ['apply', '-f', 'deployment.yaml']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=ecofusion-cluster'

  # Apply the service (if it exists)
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'apply-service'
    args: ['apply', '-f', 'service.yaml']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=ecofusion-cluster'

images:
  - 'gcr.io/$PROJECT_ID/ecofusion-website:${SHORT_SHA}'

options:
  logging: CLOUD_LOGGING_ONLY
